// Copyright (c) 2021 Leonid Kneller. All rights reserved.
// Licensed under the MIT license.
// See the LICENSE file for full license information.

package kgeo

import (
	"math"
)

// See https://geographiclib.sourceforge.io/html/geodseries30.html

func seriesA1(ε float64) float64 {
	const (
		c2 = 1.0 / 4.0
		c4 = 1.0 / 64.0
		c6 = 1.0 / 256.0
		c8 = 25.0 / 16384.0
	)
	ε2 := ε * ε
	return (1 + ε2*(c2+ε2*(c4+ε2*(c6+ε2*(c8))))) / (1 - ε)
}

func seriesA2(ε float64) float64 {
	const (
		c2 = 3.0 / 4.0
		c4 = 7.0 / 64.0
		c6 = 11.0 / 256.0
		c8 = 375.0 / 16384.0
	)
	ε2 := ε * ε
	return (1 - ε2*(c2+ε2*(c4+ε2*(c6+ε2*(c8))))) / (1 + ε)
}

type coeffA3 struct {
	c1, c2, c3, c4, c5, c6, c7, c8 float64
}

func newCoeffA3(n float64) *coeffA3 {
	C := &coeffA3{}
	C.c1 = 1.0/2.0 - 1.0/2.0*n
	C.c2 = 1.0/4.0 + n*(1.0/8.0+n*(-3.0/8.0))
	C.c3 = 1.0/16.0 + n*(3.0/16.0+n*(1.0/16.0+n*(-5.0/16.0)))
	C.c4 = 3.0/64.0 + n*(1.0/32.0+n*(5.0/32.0+n*(5.0/128.0+n*(-35.0/128.0))))
	C.c5 = 3.0/128.0 + n*(5.0/128.0+n*(5.0/256.0+n*(35.0/256.0+n*(7.0/256.0))))
	C.c6 = 5.0/256.0 + n*(15.0/1024.0+n*(35.0/1024.0+n*(7.0/512.0+n*(63.0/512.0))))
	C.c7 = 25.0/2048.0 + n*(35.0/2048.0+n*(21.0/2048.0+n*(63.0/2048.0+n*(21.0/2048.0))))
	C.c8 = 175.0/16384.0 + n*(35.0/4096.0+n*(63.0/4096.0+n*(63.0/8192.0+n*(231.0/8192.0))))
	return C
}

func (C *coeffA3) seriesA3(ε float64) float64 {
	return 1 - (ε * (C.c1 + ε*(C.c2+ε*(C.c3+ε*(C.c4+ε*(C.c5+ε*(C.c6+ε*(C.c7+ε*(C.c8)))))))))
}

func seriesC1(ε float64) (C1 [8]float64) {
	ε2 := ε * ε
	ε3 := ε * ε2
	ε4 := ε * ε3
	ε5 := ε * ε4
	ε6 := ε * ε5
	ε7 := ε * ε6
	ε8 := ε * ε7
	{
		const (
			c1 = -1.0 / 2.0
			c3 = +3.0 / 16.0
			c5 = -1.0 / 32.0
			c7 = +19.0 / 2048.0
		)
		C1[0] = ε * (c1 + ε2*(c3+ε2*(c5+ε2*(c7))))
	}
	{
		const (
			c2 = -1.0 / 16.0
			c4 = +1.0 / 32.0
			c6 = -9.0 / 2048.0
			c8 = +7.0 / 4096.0
		)
		C1[1] = ε2 * (c2 + ε2*(c4+ε2*(c6+ε2*(c8))))
	}
	{
		const (
			c3 = -1.0 / 48.0
			c5 = +3.0 / 256.0
			c7 = -3.0 / 2048.0
		)
		C1[2] = ε3 * (c3 + ε2*(c5+ε2*(c7)))
	}
	{
		const (
			c4 = -5.0 / 512.0
			c6 = +3.0 / 512.0
			c8 = -11.0 / 16384.0
		)
		C1[3] = ε4 * (c4 + ε2*(c6+ε2*(c8)))
	}
	{
		const (
			c5 = -7.0 / 1280.0
			c7 = +7.0 / 2048.0
		)
		C1[4] = ε5 * (c5 + ε2*(c7))
	}
	{
		const (
			c6 = -7.0 / 2048.0
			c8 = +9.0 / 4096.0
		)
		C1[5] = ε6 * (c6 + ε2*(c8))
	}
	{
		const (
			c7 = -33.0 / 14336.0
		)
		C1[6] = ε7 * (c7)
	}
	{
		const (
			c8 = -429.0 / 262144.0
		)
		C1[7] = ε8 * (c8)
	}
	return
}

func seriesC1p(ε float64) (C1p [8]float64) {
	ε2 := ε * ε
	ε3 := ε * ε2
	ε4 := ε * ε3
	ε5 := ε * ε4
	ε6 := ε * ε5
	ε7 := ε * ε6
	ε8 := ε * ε7
	{
		const (
			c1 = +1.0 / 2.0
			c3 = -9.0 / 32.0
			c5 = +205.0 / 1536.0
			c7 = -4879.0 / 73728.0
		)
		C1p[0] = ε * (c1 + ε2*(c3+ε2*(c5+ε2*(c7))))
	}
	{
		const (
			c2 = +5.0 / 16.0
			c4 = -37.0 / 96.0
			c6 = +1335.0 / 4096.0
			c8 = -86171.0 / 368640.0
		)
		C1p[1] = ε2 * (c2 + ε2*(c4+ε2*(c6+ε2*(c8))))
	}
	{
		const (
			c3 = +29.0 / 96.0
			c5 = -75.0 / 128.0
			c7 = +2901.0 / 4096.0
		)
		C1p[2] = ε3 * (c3 + ε2*(c5+ε2*(c7)))
	}
	{
		const (
			c4 = +539.0 / 1536.0
			c6 = -2391.0 / 2560.0
			c8 = +1082857.0 / 737280.0
		)
		C1p[3] = ε4 * (c4 + ε2*(c6+ε2*(c8)))
	}
	{
		const (
			c5 = +3467.0 / 7680.0
			c7 = -28223.0 / 18432.0
		)
		C1p[4] = ε5 * (c5 + ε2*(c7))
	}
	{
		const (
			c6 = +38081.0 / 61440.0
			c8 = -733437.0 / 286720.0
		)
		C1p[5] = ε6 * (c6 + ε2*(c8))
	}
	{
		const (
			c7 = +459485.0 / 516096.0
		)
		C1p[6] = ε7 * (c7)
	}
	{
		const (
			c8 = +109167851.0 / 82575360.0
		)
		C1p[7] = ε8 * (c8)
	}
	return
}

func seriesC2(ε float64) (C2 [8]float64) {
	ε2 := ε * ε
	ε3 := ε * ε2
	ε4 := ε * ε3
	ε5 := ε * ε4
	ε6 := ε * ε5
	ε7 := ε * ε6
	ε8 := ε * ε7
	{
		const (
			c1 = +1.0 / 2.0
			c3 = +1.0 / 16.0
			c5 = +1.0 / 32.0
			c7 = +41.0 / 2048.0
		)
		C2[0] = ε * (c1 + ε2*(c3+ε2*(c5+ε2*(c7))))
	}
	{
		const (
			c2 = +3.0 / 16.0
			c4 = +1.0 / 32.0
			c6 = +35.0 / 2048.0
			c8 = +47.0 / 4096.0
		)
		C2[1] = ε2 * (c2 + ε2*(c4+ε2*(c6+ε2*(c8))))
	}
	{
		const (
			c3 = +5.0 / 48.0
			c5 = +5.0 / 256.0
			c7 = +23.0 / 2048.0
		)
		C2[2] = ε3 * (c3 + ε2*(c5+ε2*(c7)))
	}
	{
		const (
			c4 = +35.0 / 512.0
			c6 = +7.0 / 512.0
			c8 = +133.0 / 16384.0
		)
		C2[3] = ε4 * (c4 + ε2*(c6+ε2*(c8)))
	}
	{
		const (
			c5 = +63.0 / 1280.0
			c7 = +21.0 / 2048.0
		)
		C2[4] = ε5 * (c5 + ε2*(c7))
	}
	{
		const (
			c6 = +77.0 / 2048.0
			c8 = +33.0 / 4096.0
		)
		C2[5] = ε6 * (c6 + ε2*(c8))
	}
	{
		const (
			c7 = +429.0 / 14336.0
		)
		C2[6] = ε7 * (c7)
	}
	{
		const (
			c8 = +6435.0 / 262144.0
		)
		C2[7] = ε8 * (c8)
	}
	return
}

type coeffC3 struct {
	c30 struct{ c1, c2, c3, c4, c5, c6, c7, c8 float64 }
	c31 struct{ c2, c3, c4, c5, c6, c7, c8 float64 }
	c32 struct{ c3, c4, c5, c6, c7, c8 float64 }
	c33 struct{ c4, c5, c6, c7, c8 float64 }
	c34 struct{ c5, c6, c7, c8 float64 }
	c35 struct{ c6, c7, c8 float64 }
	c36 struct{ c7, c8 float64 }
	c37 struct{ c8 float64 }
}

func newCoeffC3(n float64) *coeffC3 {
	C := &coeffC3{}
	{
		C.c30.c1 = 1.0/4.0 - 1.0/4.0*n
		C.c30.c2 = 1.0/8.0 - 1.0/8.0*n*n
		C.c30.c3 = 3.0/64.0 + n*(3.0/64.0+n*(-1.0/64.0+n*(-5.0/64.0)))
		C.c30.c4 = 5.0/128.0 + n*(1.0/64.0+n*(1.0/64.0+n*(-1.0/64.0+n*(-7.0/128.0))))
		C.c30.c5 = 3.0/128.0 + n*(11.0/512.0+n*(3.0/512.0+n*(1.0/256.0+n*(-7.0/512.0))))
		C.c30.c6 = 21.0/1024.0 + n*(5.0/512.0+n*(13.0/1024.0+n*(1.0/512.0+n*(-1.0/1024.0))))
		C.c30.c7 = 243.0/16384.0 + n*(189.0/16384.0+n*(83.0/16384.0+n*(127.0/16384.0+n*(3/16384.0))))
		C.c30.c8 = 435.0/32768.0 + n*(109.0/16384.0+n*(1.0/128.0+n*(45.0/16384.0+n*(39.0/8192.0))))
	}
	{
		C.c31.c2 = 1.0/16.0 + n*(-3.0/32.0+n*(1.0/32.0))
		C.c31.c3 = 3.0/64.0 + n*(-1.0/32.0+n*(-3.0/64.0+n*(1.0/32.0)))
		C.c31.c4 = 3.0/128.0 + n*(1.0/128.0+n*(-9.0/256.0+n*(-3.0/128.0+n*(7.0/256.0))))
		C.c31.c5 = 5.0/256.0 + n*(1.0/256.0+n*(-1.0/128.0+n*(-7.0/256.0+n*(-3.0/256.0))))
		C.c31.c6 = 27.0/2048.0 + n*(69.0/8192.0+n*(-39.0/8192.0+n*(-47.0/4096.0+n*(-41.0/2048.0))))
		C.c31.c7 = 187.0/16384.0 + n*(39.0/8192.0+n*(31.0/16384.0+n*(-63.0/8192.0+n*(-185.0/16384.0))))
		C.c31.c8 = 287.0/32768.0 + n*(47.0/8192.0+n*(31.0/65536.0+n*(-3.0/2048.0+n*(-537.0/65536.0))))
	}
	{
		C.c32.c3 = 5.0/192.0 + n*(-3.0/64.0+n*(5.0/192.0+n*(-1.0/192.0)))
		C.c32.c4 = 3.0/128.0 + n*(-5.0/192.0+n*(-1.0/64.0+n*(5.0/192.0+n*(-1.0/128.0))))
		C.c32.c5 = 7.0/512.0 + n*(-1.0/384.0+n*(-77.0/3072.0+n*(5.0/3072.0+n*(65.0/3072.0))))
		C.c32.c6 = 3.0/256.0 + n*(-1.0/1024.0+n*(-71.0/6144.0+n*(-47.0/3072.0+n*(9.0/1024.0))))
		C.c32.c7 = 139.0/16384.0 + n*(143.0/49152.0+n*(-383.0/49152.0+n*(-179.0/16384.0+n*(-121.0/16384.0))))
		C.c32.c8 = 243.0/32768.0 + n*(95.0/49152.0+n*(-41.0/16384.0+n*(-147.0/16384.0+n*(-389.0/49152.0))))
	}
	{
		C.c33.c4 = 7.0/512.0 + n*(-7.0/256.0+n*(5.0/256.0+n*(-7.0/1024.0+n*(1.0/1024.0))))
		C.c33.c5 = 7.0/512.0 + n*(-5.0/256.0+n*(-7.0/2048.0+n*(9.0/512.0+n*(-21.0/2048.0))))
		C.c33.c6 = 9.0/1024.0 + n*(-43.0/8192.0+n*(-129.0/8192.0+n*(39.0/4096.0+n*(91.0/8192.0))))
		C.c33.c7 = 127.0/16384.0 + n*(-23.0/8192.0+n*(-165.0/16384.0+n*(-47.0/8192.0+n*(213.0/16384.0))))
		C.c33.c8 = 193.0/32768.0 + n*(3.0/8192.0+n*(-505.0/65536.0+n*(-227.0/32768.0+n*(75.0/65536.0))))
	}
	{
		C.c34.c5 = 21.0/2560.0 + n*(-9.0/512.0+n*(15.0/1024.0+n*(-7.0/1024.0+n*(9.0/5120.0))))
		C.c34.c6 = 9.0/1024.0 + n*(-15.0/1024.0+n*(3.0/2048.0+n*(57.0/5120.0+n*(-5.0/512.0))))
		C.c34.c7 = 99.0/16384.0 + n*(-91.0/16384.0+n*(-781.0/81920.0+n*(883.0/81920.0+n*(319.0/81920.0))))
		C.c34.c8 = 179.0/32768.0 + n*(-55.0/16384.0+n*(-79.0/10240.0+n*(-27.0/81920.0+n*(461.0/40960.0))))
	}
	{
		C.c35.c6 = 11.0/2048.0 + n*(-99.0/8192.0+n*(275.0/24576.0+n*(-77.0/12288.0+n*(9.0/4096.0))))
		C.c35.c7 = 99.0/16384.0 + n*(-275.0/24576.0+n*(55.0/16384.0+n*(167.0/24576.0+n*(-407.0/49152.0))))
		C.c35.c8 = 143.0/32768.0 + n*(-253.0/49152.0+n*(-1105.0/196608.0+n*(481.0/49152.0+n*(-73.0/196608.0))))
	}
	{
		C.c36.c7 = 429.0/114688.0 + n*(-143.0/16384.0+n*(143.0/16384.0+n*(-91.0/16384.0+n*(39.0/16384.0))))
		C.c36.c8 = 143.0/32768.0 + n*(-143.0/16384.0+n*(65.0/16384.0+n*(65.0/16384.0+n*(-109.0/16384.0))))
	}
	{
		C.c37.c8 = 715.0/262144.0 + n*(-429.0/65536.0+n*(455.0/65536.0+n*(-637.0/131072.0+n*(315.0/131072.0))))
	}
	return C
}

func (C *coeffC3) seriesC3(ε float64) (C3 [8]float64) {
	ε2 := ε * ε
	ε3 := ε * ε2
	ε4 := ε * ε3
	ε5 := ε * ε4
	ε6 := ε * ε5
	ε7 := ε * ε6
	ε8 := ε * ε7
	C3[0] = ε * (C.c30.c1 + ε*(C.c30.c2+ε*(C.c30.c3+ε*(C.c30.c4+ε*(C.c30.c5+ε*(C.c30.c6+ε*(C.c30.c7+ε*(C.c30.c8))))))))
	C3[1] = ε2 * (C.c31.c2 + ε*(C.c31.c3+ε*(C.c31.c4+ε*(C.c31.c5+ε*(C.c31.c6+ε*(C.c31.c7+ε*(C.c31.c8)))))))
	C3[2] = ε3 * (C.c32.c3 + ε*(C.c32.c4+ε*(C.c32.c5+ε*(C.c32.c6+ε*(C.c32.c7+ε*(C.c32.c8))))))
	C3[3] = ε4 * (C.c33.c4 + ε*(C.c33.c5+ε*(C.c33.c6+ε*(C.c33.c7+ε*(C.c33.c8)))))
	C3[4] = ε5 * (C.c34.c5 + ε*(C.c34.c6+ε*(C.c34.c7+ε*(C.c34.c8))))
	C3[5] = ε6 * (C.c35.c6 + ε*(C.c35.c7+ε*(C.c35.c8)))
	C3[6] = ε7 * (C.c36.c7 + ε*(C.c36.c8))
	C3[7] = ε8 * (C.c37.c8)
	return
}

func sumSin(σ float64, C [8]float64) float64 {
	s := 0.0
	for k, Ck := range C {
		s += Ck * math.Sin(float64(2*(k+1))*σ)
	}
	return s
}
